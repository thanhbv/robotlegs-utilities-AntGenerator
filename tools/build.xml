<project name="RoboSignals-Form-Generator-1.3" default="main" >
	
	<property file="project.properties" />
	<property file="config/robotlegs-generator.properties" />
	<property file="config/log.properties" />
	
	<target name="aa_test_properties">
			<echo>project url: ${project.root.url}project.properties</echo>
			<echo>${author.name}</echo>
			<echo>${author.email}</echo>
			<echo>${company.name}</echo>
			<echo>${year}</echo>
			<echo>${project.name}</echo>
			<echo>${namespace}</echo>
			<echo>${project.path}</echo>
			<echo>${src.dir}</echo>
	</target>
	
	<!-- 01- Move libraries and source code -->
	<target name="01-move-libraries-and-source-code" >
		<echo>${log.create.RobotLegs.libraries.message}</echo>
        <echo>Copy libs folder</echo>
		<copy todir="${project.root.url}/libs">
			<fileset dir="${templates.dir}/libs"/>
  		</copy>
	</target>
	
	
	<!-- 02- Create default RoboSignals directories -->
	<target name="02-create-RoboSignals-directories" >
		<echo>${log.create.RobotLegs.directories.message}</echo>
        <mkdir dir="${project.url}/${control.dir}" />
		<mkdir dir="${project.url}/${services.dir}" />
		<mkdir dir="${project.url}/${signals.dir}" />
		<mkdir dir="${project.url}/${signals.dir}/${signaltons.dir}" />
		<mkdir dir="${project.url}/${view.dir}" />
		<mkdir dir="${project.url}/${view.dir}/components" />
		<mkdir dir="${project.url}/${view.dir}/mediators" />
        <mkdir dir="${project.url}/${model.dir}/${vo.dir}" />
        <mkdir dir="${project.url}/utils" />
	</target>


	<!-- 03- Generate Main class, context class -->
	<target name="03-create-main-class-context" >
		<echo>${log.create.main.class.and.context}</echo>
		<copy file="${robosignals.templates.dir}/ProjectSignalContext.as"
			  tofile="${project.url}/${project.name}Context.as" overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
	           		<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
	           		<token key="robotlegs.dir" value="${robotlegs.dir}" />
	            </replacetokens>
	        </filterchain>
	    </copy>
		<echo>Copy ${robosignals.templates.dir}/Main.mxml to ${project.main.url}/Main.mxml</echo>
		<copy file="${robosignals.templates.dir}/Main.mxml"
			  tofile="${project.main.url}/Main.mxml" overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
	           		<token key="namespace" value="${namespace}" />
	           		<token key="context" value="${project.name}Context"/>
					<token key="year" value="${year}" />
	            </replacetokens>
	        </filterchain>
	    </copy>

	</target>


	<!-- 03a- Generate Main class, context class AS -->
	<target name="03-create-main-class-context-as" >
		<echo>${log.create.main.class.and.context}</echo>
		<copy file="${robosignals.templates.dir}/ProjectSignalContext.as"
			  tofile="${project.url}/${project.name}Context.as" overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
	           		<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
	           		<token key="robotlegs.dir" value="${robotlegs.dir}" />
	            </replacetokens>
	        </filterchain>
	    </copy>
		<echo>Copy ${robosignals.templates.dir}/Main.as to ${project.main.url}/Main.as</echo>
		<copy file="${robosignals.templates.dir}/Main.as"
			  tofile="${project.main.url}/Main.as" overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
	           		<token key="namespace" value="${namespace}" />
	           		<token key="context" value="${project.name}Context"/>
					<token key="year" value="${year}" />
	            </replacetokens>
	        </filterchain>
	    </copy>

	</target>
	
	<!-- 04- add-startup-command -->
	<target name="04-add-startup-command">
		<echo>${log.add.startup.commmand.message}</echo>
	    <copy file="${robosignals.templates.dir}/StartupCommand.as" 
	    	  tofile="${project.url}/${control.dir}/StartupCommand.as" 
	    	  overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="Startup" />
	            </replacetokens>
	        </filterchain>
	    </copy>
		
		<copy file="${robosignals.templates.dir}/StartupSignal.as" 
			    	  tofile="${project.url}/${signals.dir}/StartupSignal.as" 
			    	  overwrite="${overwrite.files}" >
			        <filterchain>
			           <replacetokens>
							<token key="author.name" value="${author.name}" />
							<token key="author.email" value="${author.email}" />
							<token key="company.name" value="${company.name}" />
							<token key="project.name" value="${project.name}" />
							<token key="namespace" value="${namespace}" />
							<token key="year" value="${year}" />
							<token key="gesture" value="Startup" />
					        <token key="signalton" value="" />
			            </replacetokens>
			        </filterchain>
			    </copy>
		<replace file="${project.url}/${project.name}Context.as" 
			     token="// todo: add Commands"
			     value="// todo: add Commands${line.separator}
							    var startupSignal:IDispatcher = signalCommandMap.mapSignalClass(StartupSignal, StartupCommand) as IDispatcher;"
			     />
		<replace file="${project.url}/${project.name}Context.as" 
			     token="// todo: add StartupSignal dispatch"
			     value="startupSignal.dispatch();"
			     />
	</target>
	
	<!-- 05- add-signal-command-context-gesture 
		 U need to set gesture in project properties 
		 TODO: add [Inject] tag into Command Class -->
	<target name="05-add-signal-command-context-gesture">
		
		<antform title="Please, type a name of the command">
				<textProperty label="Command: " property="gestureName" />
				<!--<textProperty label="Mediator : " property="mediatorName" />-->
		</antform>
		
		<echo>${gestureName}</echo>
		<!--<echo>${mediatorName}</echo>-->
	
		<echo>${log.create.commmand.message}</echo>
	   
		<convertToUpperCase property="upperCaseGesture" value="${gestureName}" />
	    <convertToLowerCase property="lowerCaseGesture" value="${gestureName}" />
	    
		<copy file="${robosignals.templates.dir}/StartupCommand.as" 
	    	  tofile="${project.url}/${control.dir}/${gestureName}Command.as" overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gestureName}" />
		           	<token key="upperCaseGesture"  value="${upperCaseGesture}" />
	           		<token key="lowerCaseGesture"  value="${lowerCaseGesture}" />
	            </replacetokens>
	        </filterchain>
	    </copy>
		
		<copy file="${robosignals.templates.dir}/StartupSignal.as" 
	    	tofile="${project.url}/${signals.dir}/${gestureName}Signal.as" overwrite="${overwrite.files}" >
			<filterchain>
				<replacetokens>
					<token key="author.name" value="${author.name}" />
					<token key="author.email" value="${author.email}" />
					<token key="company.name" value="${company.name}" />
					<token key="project.name" value="${project.name}" />
					<token key="namespace" value="${namespace}" />
					<token key="year" value="${year}" />
					<token key="gesture" value="${gestureName}" />
					<token key="signalton" value="" />
				</replacetokens>
	        </filterchain>
	    </copy>
		
		<replace file="${project.url}/${project.name}Context.as" 
					     token="// todo: add Commands"
					     value="// todo: add Commands${line.separator}
									  signalCommandMap.mapSignalClass(${gestureName}Signal, ${gestureName}Command);"
					     />
		
	</target>	



    <!-- 06- create view-mediator class -->
    <target name="06-create-view-mediator" >
        <echo>${log.view.mediator.message}</echo>
        <antform title="Please, type a name of view component">
                <textProperty label="View/Mediator: " property="gestureName" />
        </antform>
        <echo>${gestureName}</echo>

        <convertToUpperCase property="upperCaseGesture" value="${gestureName}" />
        <convertToLowerCase property="lowerCaseGesture" value="${gestureName}" />
        <echo>copy file ${robosignals.templates.dir}/Mediator.as to ${project.url}/${view.dir}/mediators/${gestureName}Mediator.as</echo>
        <copy file="${robosignals.templates.dir}/Mediator.as"
            tofile="${project.url}/${view.dir}/mediators/${gestureName}Mediator.as" overwrite="${overwrite.files}" >
            <filterchain>
               <replacetokens>
                        <token key="author.name" value="${author.name}" />
                        <token key="author.email" value="${author.email}" />
                        <token key="company.name" value="${company.name}" />
                        <token key="project.name" value="${project.name}" />
                        <token key="namespace" value="${namespace}" />
                        <token key="year" value="${year}" />
                        <token key="gesture" value="${gestureName}" />
                        <token key="view.dir" value="${view.dir}" />
                        <token key="upperCaseGesture" value="${upperCaseGesture}" />
                           <token key="lowerCaseGesture" value="${lowerCaseGesture}" />
                </replacetokens>
            </filterchain>
        </copy>
        <echo>copy file=${robosignals.templates.dir}/View.mxml to ${project.url}/${view.dir}/${gestureName}View.mxml overwrite ${overwrite.files}</echo>
        <copy file="${robosignals.templates.dir}/View.mxml"
            tofile="${project.url}/${view.dir}/${gestureName}View.mxml" overwrite="${overwrite.files}" >
            <filterchain>
               <replacetokens>
                        <token key="author.name" value="${author.name}" />
                        <token key="author.email" value="${author.email}" />
                        <token key="company.name" value="${company.name}" />
                        <token key="project.name" value="${project.name}" />
                        <token key="namespace" value="${namespace}" />
                        <token key="year" value="${year}" />
                        <token key="gesture" value="${gestureName}" />
                        <token key="view.dir" value="${view.dir}" />
                </replacetokens>
            </filterchain>
        </copy>

        <echo>Register mediator with context class</echo>
        <replace file="${project.url}/${project.name}Context.as"
                 token="// todo: Add View"
                 value="// todo: Add View${line.separator}
                          mediatorMap.mapView(${gestureName}View, ${gestureName}Mediator);"
                 />

    </target>



    <!-- 06a- create view-mediator class AS-->
    <target name="06a-create-view-mediator-as" >
        <echo>${log.view.mediator.message}</echo>
        <antform title="Please, type a name of view component">
                <textProperty label="View/Mediator: " property="gestureName" />
        </antform>
        <echo>${gestureName}</echo>

        <convertToUpperCase property="upperCaseGesture" value="${gestureName}" />
        <convertToLowerCase property="lowerCaseGesture" value="${gestureName}" />
        <echo>copy file ${robosignals.templates.dir}/Mediator.as to ${project.url}/${view.dir}/mediators/${gestureName}Mediator.as</echo>
        <copy file="${robosignals.templates.dir}/Mediator.as"
            tofile="${project.url}/${view.dir}/mediators/${gestureName}Mediator.as" overwrite="${overwrite.files}" >
            <filterchain>
               <replacetokens>
                        <token key="author.name" value="${author.name}" />
                        <token key="author.email" value="${author.email}" />
                        <token key="company.name" value="${company.name}" />
                        <token key="project.name" value="${project.name}" />
                        <token key="namespace" value="${namespace}" />
                        <token key="year" value="${year}" />
                        <token key="gesture" value="${gestureName}" />
                        <token key="view.dir" value="${view.dir}" />
                        <token key="upperCaseGesture" value="${upperCaseGesture}" />
                           <token key="lowerCaseGesture" value="${lowerCaseGesture}" />
                </replacetokens>
            </filterchain>
        </copy>
        <echo>copy file=${robosignals.templates.dir}/View.as to ${project.url}/${view.dir}/${gestureName}View.as overwrite ${overwrite.files}</echo>
        <copy file="${robosignals.templates.dir}/View.as"
            tofile="${project.url}/${view.dir}/${gestureName}View.as" overwrite="${overwrite.files}" >
            <filterchain>
               <replacetokens>
                        <token key="author.name" value="${author.name}" />
                        <token key="author.email" value="${author.email}" />
                        <token key="company.name" value="${company.name}" />
                        <token key="project.name" value="${project.name}" />
                        <token key="namespace" value="${namespace}" />
                        <token key="year" value="${year}" />
                        <token key="gesture" value="${gestureName}" />
                        <token key="view.dir" value="${view.dir}" />
                </replacetokens>
            </filterchain>
        </copy>

        <echo>Register mediator with context class</echo>
        <replace file="${project.url}/${project.name}Context.as"
                 token="// todo: Add View"
                 value="// todo: Add View${line.separator}
                          mediatorMap.mapView(${gestureName}View, ${gestureName}Mediator);"
                 />

    </target>


	<!-- 07- create model class -->
	<target name="07-create-model-class" >
		<echo>${log.create.model.class.message}</echo>
		<antform title="Please, type a name of model class">
				<textProperty label="Model: " property="gestureName" />
		</antform>
		<echo>GestureName: ${gestureName}</echo>
		
	    <copy file="${robosignals.templates.dir}/Model.as" 
	    	tofile="${project.url}/${model.dir}/${gestureName}Model.as" overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
						<token key="author.name" value="${author.name}" />
						<token key="author.email" value="${author.email}" />
						<token key="company.name" value="${company.name}" />
						<token key="project.name" value="${project.name}" />
						<token key="namespace" value="${namespace}" />
						<token key="year" value="${year}" />
						<token key="gesture" value="${gestureName}" />
                    	<token key="model.dir" value="${model.dir}" />
	            </replacetokens>
	        </filterchain>
	    </copy>
		
		<echo>Register model with context class</echo>
		<replace file="${project.url}/${project.name}Context.as" 
			     token="// todo: Add Model"
			     value="// todo: Add Model${line.separator}
			        injector.mapSingleton( ${gestureName}Model );"
			     />
		
	</target>
	
	<!-- 08- signal singleton (dispatched by model) -->
		<target name="08-signalton-(eg.-dispatched-by-model)" >
			<echo>${log.create.model.class.message}</echo>
			<antform title="Please, type a name of a signalton">
				<textProperty label="Signalton: " property="gestureName" />
			</antform>
			<echo>GestureName: ${gestureName}</echo>
		    <copy file="${robosignals.templates.dir}/StartupSignal.as" 
		    	tofile="${project.url}/${signals.dir}/signaltons/${gestureName}Signal.as" overwrite="${overwrite.files}" >
		        <filterchain>
		           <replacetokens>
							<token key="author.name" value="${author.name}" />
							<token key="author.email" value="${author.email}" />
							<token key="company.name" value="${company.name}" />
							<token key="project.name" value="${project.name}" />
							<token key="namespace" value="${namespace}" />
							<token key="year" value="${year}" />
							<token key="gesture" value="${gestureName}" />
	                    	<token key="model.dir" value="${model.dir}" />
					        <token key="signalton" value=".signaltons" />
		            </replacetokens>
		        </filterchain>
		    </copy>
			
			<echo>Register model with context class</echo>
			<replace file="${project.url}/${project.name}Context.as" 
				     token="// todo: add Singleton"
				     value="// todo: add Singleton${line.separator}
				        injector.mapSingleton( ${gestureName}Signal );"
				     />
			
		</target>
		
	
	<!--09 create service class -->
	<target name="09-create-service-class" >
		<echo>${log.create.service.message}</echo>
		<antform title="Please, type a name of a service class">
				<textProperty label="Service: " property="gestureName" />
		</antform>
		<echo>GestureName: ${gestureName}</echo>
	    <copy file="${robosignals.templates.dir}/Service.as" 
	    	tofile="${project.url}/${services.dir}/${gestureName}Service.as" overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
						<token key="author.name" value="${author.name}" />
						<token key="author.email" value="${author.email}" />
						<token key="company.name" value="${company.name}" />
						<token key="project.name" value="${project.name}" />
						<token key="namespace" value="${namespace}" />
						<token key="year" value="${year}" />
						<token key="gesture" value="${gestureName}" />
                    	<token key="services.dir " value="${services.dir}" />
	            </replacetokens>
	        </filterchain>
	    </copy>
	    
	    <copy file="${robosignals.templates.dir}/IService.as" 
	    	tofile="${project.url}/${services.dir}/I${gestureName}Service.as" overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
						<token key="author.name" value="${author.name}" />
						<token key="author.email" value="${author.email}" />
						<token key="company.name" value="${company.name}" />
						<token key="project.name" value="${project.name}" />
						<token key="namespace" value="${namespace}" />
						<token key="year" value="${year}" />
						<token key="gesture" value="${gestureName}" />
                    	<token key="services.dir " value="${services.dir}" />
						<token key="gesture" value="${gestureName}" />
			           	<token key="upperCaseGesture" value="${upperCaseGesture}" />
		           		<token key="lowerCaseGesture" value="${lowerCaseGesture}" />                    	
	            </replacetokens>
	        </filterchain>
	    </copy>		    
		
		<echo>Register service with context class</echo>
		<replace file="${project.url}/${project.name}Context.as" 
			     token="// todo: Add Services"
			     value="// todo: Add Services${line.separator}
			        injector.mapSingletonOf( I${gestureName}Service, ${gestureName}Service );"
			     />
		
	</target>
	
	
	<!-- 10 restfull coding by indyq -->
	<!--<target name="10-inject-signal-to-mediator-add-listener">
		<echo>${log.value.object.message}</echo>
		<antform title="Please, type in Gesture Name">
				<textProperty label="Gesture: " property="gestureName" />
				<textProperty label="Target Mediator: " property="targetMaediator" />
		</antform>
		<echo>GestureName: ${gestureName}</echo>
		
		<convertToCamelCase property="camelCaseGesture" value="${gestureName}" />
		<echo>${camelCaseGesture}</echo>
		
		<replace file="${project.url}/${view.dir}/mediators/${targetMediator}Mediator.as" 
			     token="/** inject **/" 
			     value="/** inject **/${line.separator}
       [Inject]${line.separator}
       public var ${camelCaseGesture}Signal:${gestureName}Signal;${line.separator}"
		/>
		
		<replace file="${project.url}/${view.dir}/mediators/${targetMediator}Mediator.as" 
			     token="/** addListerners **/" 
			     value="/** addListerners **/${line.separator}
           ${camelCaseGesture}Signal.add(${camelCaseGesture}SignalHandler);"
		/>
		
		
		<replace file="${project.url}/${view.dir}/mediators/${targetMediator}Mediator.as" 
			     token="/** eventHandlers **/" 
			     value="/** eventHandlers **/${line.separator}
       //todo: add params ${line.separator}
       public function ${camelCaseGesture}SignalHandler() : void {${line.separator}${line.separator} 
       }"
		/>
	</target>-->
	
	
	<!-- 11 create ValueObject class -->
	<target name="11-create-value-object" >
		<echo>${log.value.object.message}</echo>
		<antform title="Please, type a name of a value object">
				<textProperty label="Value Object: " property="gestureName" />
		</antform>
		<echo>GestureName: ${gestureName}</echo>
		
	    <copy file="${robotlegs.templates.dir}/ValueObject.as" 
	    	tofile="${project.url}/${model.dir}/${vo.dir}/${gestureName}VO.as" overwrite="${overwrite.files}" >
	        <filterchain>
	           <replacetokens>
						<token key="author.name" value="${author.name}" />
						<token key="author.email" value="${author.email}" />
						<token key="company.name" value="${company.name}" />
						<token key="project.name" value="${project.name}" />
						<token key="namespace" value="${namespace}" />
						<token key="year" value="${year}" />
						<token key="gesture" value="${gestureName}" />
                    	<token key="vo.dir" value="${vo.dir}" />
                    	<token key="model.dir" value="${model.dir}" />
	            </replacetokens>
	        </filterchain>
	    </copy>
	</target>
	
	<target name="main" />
	
    <!-- private -->
	<scriptdef name="convertToCamelCase" language="javascript" >
		<attribute name="property" />
		<attribute name="value"    />
		project.setNewProperty( attributes.get("property"), attributes.get("value").substring(0,1).toLowerCase() + attributes.get("value").substring(1) );
	</scriptdef>
	
	<scriptdef name="convertToUpperCase" language="javascript" >
		<attribute name="property" />
		<attribute name="value"    />
		project.setNewProperty( attributes.get("property"), attributes.get("value").toUpperCase() );
	</scriptdef>
	
	<scriptdef name="convertToLowerCase" language="javascript" >
		<attribute name="property" />
		<attribute name="value"    />
		project.setNewProperty( attributes.get("property"), attributes.get("value").toLowerCase() );
	</scriptdef>			      
    
	<path id="runtime.cp">
		<pathelement location="bin/"/>
		<fileset dir="libs" includes="antform.jar"/>
	</path>
	<taskdef name="antform" classname="com.sardak.antform.AntForm"
		classpathref="runtime.cp"/>
	<taskdef name="antmenu" classname="com.sardak.antform.AntMenu"
		classpathref="runtime.cp"/>
	
</project>    
